#pragma once
#include <stdint.h>
#include "Matrices.h"
// Transposes a matrix that is [2] rows by [2] columns to a matrix that has [2] rows by [2] columns  
 M_2x2 Transpose(M_2x2  value) {return {value.M1.N2,value.M2.N2};};
// Transposes a matrix that is [3] rows by [2] columns to a matrix that has [2] rows by [3] columns  
 M_2x3 Transpose(M_3x2  value) {return {value.M1.N2,value.M2.N2,value.M3.N2};};
// Transposes a matrix that is [4] rows by [2] columns to a matrix that has [2] rows by [4] columns  
 M_2x4 Transpose(M_4x2  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2};};
// Transposes a matrix that is [5] rows by [2] columns to a matrix that has [2] rows by [5] columns  
 M_2x5 Transpose(M_5x2  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2};};
// Transposes a matrix that is [6] rows by [2] columns to a matrix that has [2] rows by [6] columns  
 M_2x6 Transpose(M_6x2  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2};};
// Transposes a matrix that is [7] rows by [2] columns to a matrix that has [2] rows by [7] columns  
 M_2x7 Transpose(M_7x2  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2};};
// Transposes a matrix that is [8] rows by [2] columns to a matrix that has [2] rows by [8] columns  
 M_2x8 Transpose(M_8x2  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2};};
// Transposes a matrix that is [9] rows by [2] columns to a matrix that has [2] rows by [9] columns  
 M_2x9 Transpose(M_9x2  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2};};
// Transposes a matrix that is [2] rows by [3] columns to a matrix that has [3] rows by [2] columns  
 M_3x2 Transpose(M_2x3  value) {return {value.M1.N2,value.M2.N2,value.M1.N3,value.M2.N3};};
// Transposes a matrix that is [3] rows by [3] columns to a matrix that has [3] rows by [3] columns  
 M_3x3 Transpose(M_3x3  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M1.N3,value.M2.N3,value.M3.N3};};
// Transposes a matrix that is [4] rows by [3] columns to a matrix that has [3] rows by [4] columns  
 M_3x4 Transpose(M_4x3  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3};};
// Transposes a matrix that is [5] rows by [3] columns to a matrix that has [3] rows by [5] columns  
 M_3x5 Transpose(M_5x3  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3};};
// Transposes a matrix that is [6] rows by [3] columns to a matrix that has [3] rows by [6] columns  
 M_3x6 Transpose(M_6x3  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3};};
// Transposes a matrix that is [7] rows by [3] columns to a matrix that has [3] rows by [7] columns  
 M_3x7 Transpose(M_7x3  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3};};
// Transposes a matrix that is [8] rows by [3] columns to a matrix that has [3] rows by [8] columns  
 M_3x8 Transpose(M_8x3  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3};};
// Transposes a matrix that is [9] rows by [3] columns to a matrix that has [3] rows by [9] columns  
 M_3x9 Transpose(M_9x3  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M9.N3};};
// Transposes a matrix that is [2] rows by [4] columns to a matrix that has [4] rows by [2] columns  
 M_4x2 Transpose(M_2x4  value) {return {value.M1.N2,value.M2.N2,value.M1.N3,value.M2.N3,value.M1.N4,value.M2.N4};};
// Transposes a matrix that is [3] rows by [4] columns to a matrix that has [4] rows by [3] columns  
 M_4x3 Transpose(M_3x4  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M1.N4,value.M2.N4,value.M3.N4};};
// Transposes a matrix that is [4] rows by [4] columns to a matrix that has [4] rows by [4] columns  
 M_4x4 Transpose(M_4x4  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4};};
// Transposes a matrix that is [5] rows by [4] columns to a matrix that has [4] rows by [5] columns  
 M_4x5 Transpose(M_5x4  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4};};
// Transposes a matrix that is [6] rows by [4] columns to a matrix that has [4] rows by [6] columns  
 M_4x6 Transpose(M_6x4  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4};};
// Transposes a matrix that is [7] rows by [4] columns to a matrix that has [4] rows by [7] columns  
 M_4x7 Transpose(M_7x4  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4};};
// Transposes a matrix that is [8] rows by [4] columns to a matrix that has [4] rows by [8] columns  
 M_4x8 Transpose(M_8x4  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4};};
// Transposes a matrix that is [9] rows by [4] columns to a matrix that has [4] rows by [9] columns  
 M_4x9 Transpose(M_9x4  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M9.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M9.N4};};
// Transposes a matrix that is [2] rows by [5] columns to a matrix that has [5] rows by [2] columns  
 M_5x2 Transpose(M_2x5  value) {return {value.M1.N2,value.M2.N2,value.M1.N3,value.M2.N3,value.M1.N4,value.M2.N4,value.M1.N5,value.M2.N5};};
// Transposes a matrix that is [3] rows by [5] columns to a matrix that has [5] rows by [3] columns  
 M_5x3 Transpose(M_3x5  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M1.N5,value.M2.N5,value.M3.N5};};
// Transposes a matrix that is [4] rows by [5] columns to a matrix that has [5] rows by [4] columns  
 M_5x4 Transpose(M_4x5  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5};};
// Transposes a matrix that is [5] rows by [5] columns to a matrix that has [5] rows by [5] columns  
 M_5x5 Transpose(M_5x5  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5};};
// Transposes a matrix that is [6] rows by [5] columns to a matrix that has [5] rows by [6] columns  
 M_5x6 Transpose(M_6x5  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5};};
// Transposes a matrix that is [7] rows by [5] columns to a matrix that has [5] rows by [7] columns  
 M_5x7 Transpose(M_7x5  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5};};
// Transposes a matrix that is [8] rows by [5] columns to a matrix that has [5] rows by [8] columns  
 M_5x8 Transpose(M_8x5  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5};};
// Transposes a matrix that is [9] rows by [5] columns to a matrix that has [5] rows by [9] columns  
 M_5x9 Transpose(M_9x5  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M9.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M9.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M9.N5};};
// Transposes a matrix that is [2] rows by [6] columns to a matrix that has [6] rows by [2] columns  
 M_6x2 Transpose(M_2x6  value) {return {value.M1.N2,value.M2.N2,value.M1.N3,value.M2.N3,value.M1.N4,value.M2.N4,value.M1.N5,value.M2.N5,value.M1.N6,value.M2.N6};};
// Transposes a matrix that is [3] rows by [6] columns to a matrix that has [6] rows by [3] columns  
 M_6x3 Transpose(M_3x6  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M1.N6,value.M2.N6,value.M3.N6};};
// Transposes a matrix that is [4] rows by [6] columns to a matrix that has [6] rows by [4] columns  
 M_6x4 Transpose(M_4x6  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6};};
// Transposes a matrix that is [5] rows by [6] columns to a matrix that has [6] rows by [5] columns  
 M_6x5 Transpose(M_5x6  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6};};
// Transposes a matrix that is [6] rows by [6] columns to a matrix that has [6] rows by [6] columns  
 M_6x6 Transpose(M_6x6  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6};};
// Transposes a matrix that is [7] rows by [6] columns to a matrix that has [6] rows by [7] columns  
 M_6x7 Transpose(M_7x6  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6};};
// Transposes a matrix that is [8] rows by [6] columns to a matrix that has [6] rows by [8] columns  
 M_6x8 Transpose(M_8x6  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6};};
// Transposes a matrix that is [9] rows by [6] columns to a matrix that has [6] rows by [9] columns  
 M_6x9 Transpose(M_9x6  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M9.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M9.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M9.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6,value.M9.N6};};
// Transposes a matrix that is [2] rows by [7] columns to a matrix that has [7] rows by [2] columns  
 M_7x2 Transpose(M_2x7  value) {return {value.M1.N2,value.M2.N2,value.M1.N3,value.M2.N3,value.M1.N4,value.M2.N4,value.M1.N5,value.M2.N5,value.M1.N6,value.M2.N6,value.M1.N7,value.M2.N7};};
// Transposes a matrix that is [3] rows by [7] columns to a matrix that has [7] rows by [3] columns  
 M_7x3 Transpose(M_3x7  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M1.N7,value.M2.N7,value.M3.N7};};
// Transposes a matrix that is [4] rows by [7] columns to a matrix that has [7] rows by [4] columns  
 M_7x4 Transpose(M_4x7  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7};};
// Transposes a matrix that is [5] rows by [7] columns to a matrix that has [7] rows by [5] columns  
 M_7x5 Transpose(M_5x7  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7};};
// Transposes a matrix that is [6] rows by [7] columns to a matrix that has [7] rows by [6] columns  
 M_7x6 Transpose(M_6x7  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7};};
// Transposes a matrix that is [7] rows by [7] columns to a matrix that has [7] rows by [7] columns  
 M_7x7 Transpose(M_7x7  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7};};
// Transposes a matrix that is [8] rows by [7] columns to a matrix that has [7] rows by [8] columns  
 M_7x8 Transpose(M_8x7  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M8.N7};};
// Transposes a matrix that is [9] rows by [7] columns to a matrix that has [7] rows by [9] columns  
 M_7x9 Transpose(M_9x7  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M9.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M9.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M9.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6,value.M9.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M8.N7,value.M9.N7};};
// Transposes a matrix that is [2] rows by [8] columns to a matrix that has [8] rows by [2] columns  
 M_8x2 Transpose(M_2x8  value) {return {value.M1.N2,value.M2.N2,value.M1.N3,value.M2.N3,value.M1.N4,value.M2.N4,value.M1.N5,value.M2.N5,value.M1.N6,value.M2.N6,value.M1.N7,value.M2.N7,value.M1.N8,value.M2.N8};};
// Transposes a matrix that is [3] rows by [8] columns to a matrix that has [8] rows by [3] columns  
 M_8x3 Transpose(M_3x8  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M1.N8,value.M2.N8,value.M3.N8};};
// Transposes a matrix that is [4] rows by [8] columns to a matrix that has [8] rows by [4] columns  
 M_8x4 Transpose(M_4x8  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8};};
// Transposes a matrix that is [5] rows by [8] columns to a matrix that has [8] rows by [5] columns  
 M_8x5 Transpose(M_5x8  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8};};
// Transposes a matrix that is [6] rows by [8] columns to a matrix that has [8] rows by [6] columns  
 M_8x6 Transpose(M_6x8  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8};};
// Transposes a matrix that is [7] rows by [8] columns to a matrix that has [8] rows by [7] columns  
 M_8x7 Transpose(M_7x8  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8,value.M7.N8};};
// Transposes a matrix that is [8] rows by [8] columns to a matrix that has [8] rows by [8] columns  
 M_8x8 Transpose(M_8x8  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M8.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8,value.M7.N8,value.M8.N8};};
// Transposes a matrix that is [9] rows by [8] columns to a matrix that has [8] rows by [9] columns  
 M_8x9 Transpose(M_9x8  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M9.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M9.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M9.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6,value.M9.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M8.N7,value.M9.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8,value.M7.N8,value.M8.N8,value.M9.N8};};
// Transposes a matrix that is [2] rows by [9] columns to a matrix that has [9] rows by [2] columns  
 M_9x2 Transpose(M_2x9  value) {return {value.M1.N2,value.M2.N2,value.M1.N3,value.M2.N3,value.M1.N4,value.M2.N4,value.M1.N5,value.M2.N5,value.M1.N6,value.M2.N6,value.M1.N7,value.M2.N7,value.M1.N8,value.M2.N8,value.M1.N9,value.M2.N9};};
// Transposes a matrix that is [3] rows by [9] columns to a matrix that has [9] rows by [3] columns  
 M_9x3 Transpose(M_3x9  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M1.N9,value.M2.N9,value.M3.N9};};
// Transposes a matrix that is [4] rows by [9] columns to a matrix that has [9] rows by [4] columns  
 M_9x4 Transpose(M_4x9  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M1.N9,value.M2.N9,value.M3.N9,value.M4.N9};};
// Transposes a matrix that is [5] rows by [9] columns to a matrix that has [9] rows by [5] columns  
 M_9x5 Transpose(M_5x9  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M1.N9,value.M2.N9,value.M3.N9,value.M4.N9,value.M5.N9};};
// Transposes a matrix that is [6] rows by [9] columns to a matrix that has [9] rows by [6] columns  
 M_9x6 Transpose(M_6x9  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8,value.M1.N9,value.M2.N9,value.M3.N9,value.M4.N9,value.M5.N9,value.M6.N9};};
// Transposes a matrix that is [7] rows by [9] columns to a matrix that has [9] rows by [7] columns  
 M_9x7 Transpose(M_7x9  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8,value.M7.N8,value.M1.N9,value.M2.N9,value.M3.N9,value.M4.N9,value.M5.N9,value.M6.N9,value.M7.N9};};
// Transposes a matrix that is [8] rows by [9] columns to a matrix that has [9] rows by [8] columns  
 M_9x8 Transpose(M_8x9  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M8.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8,value.M7.N8,value.M8.N8,value.M1.N9,value.M2.N9,value.M3.N9,value.M4.N9,value.M5.N9,value.M6.N9,value.M7.N9,value.M8.N9};};
// Transposes a matrix that is [9] rows by [9] columns to a matrix that has [9] rows by [9] columns  
 M_9x9 Transpose(M_9x9  value) {return {value.M1.N2,value.M2.N2,value.M3.N2,value.M4.N2,value.M5.N2,value.M6.N2,value.M7.N2,value.M8.N2,value.M9.N2,value.M1.N3,value.M2.N3,value.M3.N3,value.M4.N3,value.M5.N3,value.M6.N3,value.M7.N3,value.M8.N3,value.M9.N3,value.M1.N4,value.M2.N4,value.M3.N4,value.M4.N4,value.M5.N4,value.M6.N4,value.M7.N4,value.M8.N4,value.M9.N4,value.M1.N5,value.M2.N5,value.M3.N5,value.M4.N5,value.M5.N5,value.M6.N5,value.M7.N5,value.M8.N5,value.M9.N5,value.M1.N6,value.M2.N6,value.M3.N6,value.M4.N6,value.M5.N6,value.M6.N6,value.M7.N6,value.M8.N6,value.M9.N6,value.M1.N7,value.M2.N7,value.M3.N7,value.M4.N7,value.M5.N7,value.M6.N7,value.M7.N7,value.M8.N7,value.M9.N7,value.M1.N8,value.M2.N8,value.M3.N8,value.M4.N8,value.M5.N8,value.M6.N8,value.M7.N8,value.M8.N8,value.M9.N8,value.M1.N9,value.M2.N9,value.M3.N9,value.M4.N9,value.M5.N9,value.M6.N9,value.M7.N9,value.M8.N9,value.M9.N9};};

// Transposes a matrix that is [2] rows by [2] columns to a matrix that has [2] rows by [2] columns  
 M_2x2 ApplyScalar(M_2x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2)};};
// Transposes a matrix that is [3] rows by [2] columns to a matrix that has [2] rows by [3] columns  
 M_3x2 ApplyScalar(M_3x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2)};};
// Transposes a matrix that is [4] rows by [2] columns to a matrix that has [2] rows by [4] columns  
 M_4x2 ApplyScalar(M_4x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2)};};
// Transposes a matrix that is [5] rows by [2] columns to a matrix that has [2] rows by [5] columns  
 M_5x2 ApplyScalar(M_5x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2)};};
// Transposes a matrix that is [6] rows by [2] columns to a matrix that has [2] rows by [6] columns  
 M_6x2 ApplyScalar(M_6x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2)};};
// Transposes a matrix that is [7] rows by [2] columns to a matrix that has [2] rows by [7] columns  
 M_7x2 ApplyScalar(M_7x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2)};};
// Transposes a matrix that is [8] rows by [2] columns to a matrix that has [2] rows by [8] columns  
 M_8x2 ApplyScalar(M_8x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2)};};
// Transposes a matrix that is [9] rows by [2] columns to a matrix that has [2] rows by [9] columns  
 M_9x2 ApplyScalar(M_9x2 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2)};};
// Transposes a matrix that is [2] rows by [3] columns to a matrix that has [3] rows by [2] columns  
 M_2x3 ApplyScalar(M_2x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M1.N3),func(value.M2.N3)};};
// Transposes a matrix that is [3] rows by [3] columns to a matrix that has [3] rows by [3] columns  
 M_3x3 ApplyScalar(M_3x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3)};};
// Transposes a matrix that is [4] rows by [3] columns to a matrix that has [3] rows by [4] columns  
 M_4x3 ApplyScalar(M_4x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3)};};
// Transposes a matrix that is [5] rows by [3] columns to a matrix that has [3] rows by [5] columns  
 M_5x3 ApplyScalar(M_5x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3)};};
// Transposes a matrix that is [6] rows by [3] columns to a matrix that has [3] rows by [6] columns  
 M_6x3 ApplyScalar(M_6x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3)};};
// Transposes a matrix that is [7] rows by [3] columns to a matrix that has [3] rows by [7] columns  
 M_7x3 ApplyScalar(M_7x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3)};};
// Transposes a matrix that is [8] rows by [3] columns to a matrix that has [3] rows by [8] columns  
 M_8x3 ApplyScalar(M_8x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3)};};
// Transposes a matrix that is [9] rows by [3] columns to a matrix that has [3] rows by [9] columns  
 M_9x3 ApplyScalar(M_9x3 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M9.N3)};};
// Transposes a matrix that is [2] rows by [4] columns to a matrix that has [4] rows by [2] columns  
 M_2x4 ApplyScalar(M_2x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M1.N3),func(value.M2.N3),func(value.M1.N4),func(value.M2.N4)};};
// Transposes a matrix that is [3] rows by [4] columns to a matrix that has [4] rows by [3] columns  
 M_3x4 ApplyScalar(M_3x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4)};};
// Transposes a matrix that is [4] rows by [4] columns to a matrix that has [4] rows by [4] columns  
 M_4x4 ApplyScalar(M_4x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4)};};
// Transposes a matrix that is [5] rows by [4] columns to a matrix that has [4] rows by [5] columns  
 M_5x4 ApplyScalar(M_5x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4)};};
// Transposes a matrix that is [6] rows by [4] columns to a matrix that has [4] rows by [6] columns  
 M_6x4 ApplyScalar(M_6x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4)};};
// Transposes a matrix that is [7] rows by [4] columns to a matrix that has [4] rows by [7] columns  
 M_7x4 ApplyScalar(M_7x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4)};};
// Transposes a matrix that is [8] rows by [4] columns to a matrix that has [4] rows by [8] columns  
 M_8x4 ApplyScalar(M_8x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4)};};
// Transposes a matrix that is [9] rows by [4] columns to a matrix that has [4] rows by [9] columns  
 M_9x4 ApplyScalar(M_9x4 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M9.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M9.N4)};};
// Transposes a matrix that is [2] rows by [5] columns to a matrix that has [5] rows by [2] columns  
 M_2x5 ApplyScalar(M_2x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M1.N3),func(value.M2.N3),func(value.M1.N4),func(value.M2.N4),func(value.M1.N5),func(value.M2.N5)};};
// Transposes a matrix that is [3] rows by [5] columns to a matrix that has [5] rows by [3] columns  
 M_3x5 ApplyScalar(M_3x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5)};};
// Transposes a matrix that is [4] rows by [5] columns to a matrix that has [5] rows by [4] columns  
 M_4x5 ApplyScalar(M_4x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5)};};
// Transposes a matrix that is [5] rows by [5] columns to a matrix that has [5] rows by [5] columns  
 M_5x5 ApplyScalar(M_5x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5)};};
// Transposes a matrix that is [6] rows by [5] columns to a matrix that has [5] rows by [6] columns  
 M_6x5 ApplyScalar(M_6x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5)};};
// Transposes a matrix that is [7] rows by [5] columns to a matrix that has [5] rows by [7] columns  
 M_7x5 ApplyScalar(M_7x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5)};};
// Transposes a matrix that is [8] rows by [5] columns to a matrix that has [5] rows by [8] columns  
 M_8x5 ApplyScalar(M_8x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5)};};
// Transposes a matrix that is [9] rows by [5] columns to a matrix that has [5] rows by [9] columns  
 M_9x5 ApplyScalar(M_9x5 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M9.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M9.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M9.N5)};};
// Transposes a matrix that is [2] rows by [6] columns to a matrix that has [6] rows by [2] columns  
 M_2x6 ApplyScalar(M_2x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M1.N3),func(value.M2.N3),func(value.M1.N4),func(value.M2.N4),func(value.M1.N5),func(value.M2.N5),func(value.M1.N6),func(value.M2.N6)};};
// Transposes a matrix that is [3] rows by [6] columns to a matrix that has [6] rows by [3] columns  
 M_3x6 ApplyScalar(M_3x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6)};};
// Transposes a matrix that is [4] rows by [6] columns to a matrix that has [6] rows by [4] columns  
 M_4x6 ApplyScalar(M_4x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6)};};
// Transposes a matrix that is [5] rows by [6] columns to a matrix that has [6] rows by [5] columns  
 M_5x6 ApplyScalar(M_5x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6)};};
// Transposes a matrix that is [6] rows by [6] columns to a matrix that has [6] rows by [6] columns  
 M_6x6 ApplyScalar(M_6x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6)};};
// Transposes a matrix that is [7] rows by [6] columns to a matrix that has [6] rows by [7] columns  
 M_7x6 ApplyScalar(M_7x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6)};};
// Transposes a matrix that is [8] rows by [6] columns to a matrix that has [6] rows by [8] columns  
 M_8x6 ApplyScalar(M_8x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6)};};
// Transposes a matrix that is [9] rows by [6] columns to a matrix that has [6] rows by [9] columns  
 M_9x6 ApplyScalar(M_9x6 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M9.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M9.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M9.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6),func(value.M9.N6)};};
// Transposes a matrix that is [2] rows by [7] columns to a matrix that has [7] rows by [2] columns  
 M_2x7 ApplyScalar(M_2x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M1.N3),func(value.M2.N3),func(value.M1.N4),func(value.M2.N4),func(value.M1.N5),func(value.M2.N5),func(value.M1.N6),func(value.M2.N6),func(value.M1.N7),func(value.M2.N7)};};
// Transposes a matrix that is [3] rows by [7] columns to a matrix that has [7] rows by [3] columns  
 M_3x7 ApplyScalar(M_3x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7)};};
// Transposes a matrix that is [4] rows by [7] columns to a matrix that has [7] rows by [4] columns  
 M_4x7 ApplyScalar(M_4x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7)};};
// Transposes a matrix that is [5] rows by [7] columns to a matrix that has [7] rows by [5] columns  
 M_5x7 ApplyScalar(M_5x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7)};};
// Transposes a matrix that is [6] rows by [7] columns to a matrix that has [7] rows by [6] columns  
 M_6x7 ApplyScalar(M_6x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7)};};
// Transposes a matrix that is [7] rows by [7] columns to a matrix that has [7] rows by [7] columns  
 M_7x7 ApplyScalar(M_7x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7)};};
// Transposes a matrix that is [8] rows by [7] columns to a matrix that has [7] rows by [8] columns  
 M_8x7 ApplyScalar(M_8x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M8.N7)};};
// Transposes a matrix that is [9] rows by [7] columns to a matrix that has [7] rows by [9] columns  
 M_9x7 ApplyScalar(M_9x7 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M9.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M9.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M9.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6),func(value.M9.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M8.N7),func(value.M9.N7)};};
// Transposes a matrix that is [2] rows by [8] columns to a matrix that has [8] rows by [2] columns  
 M_2x8 ApplyScalar(M_2x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M1.N3),func(value.M2.N3),func(value.M1.N4),func(value.M2.N4),func(value.M1.N5),func(value.M2.N5),func(value.M1.N6),func(value.M2.N6),func(value.M1.N7),func(value.M2.N7),func(value.M1.N8),func(value.M2.N8)};};
// Transposes a matrix that is [3] rows by [8] columns to a matrix that has [8] rows by [3] columns  
 M_3x8 ApplyScalar(M_3x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8)};};
// Transposes a matrix that is [4] rows by [8] columns to a matrix that has [8] rows by [4] columns  
 M_4x8 ApplyScalar(M_4x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8)};};
// Transposes a matrix that is [5] rows by [8] columns to a matrix that has [8] rows by [5] columns  
 M_5x8 ApplyScalar(M_5x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8)};};
// Transposes a matrix that is [6] rows by [8] columns to a matrix that has [8] rows by [6] columns  
 M_6x8 ApplyScalar(M_6x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8)};};
// Transposes a matrix that is [7] rows by [8] columns to a matrix that has [8] rows by [7] columns  
 M_7x8 ApplyScalar(M_7x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8),func(value.M7.N8)};};
// Transposes a matrix that is [8] rows by [8] columns to a matrix that has [8] rows by [8] columns  
 M_8x8 ApplyScalar(M_8x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M8.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8),func(value.M7.N8),func(value.M8.N8)};};
// Transposes a matrix that is [9] rows by [8] columns to a matrix that has [8] rows by [9] columns  
 M_9x8 ApplyScalar(M_9x8 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M9.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M9.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M9.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6),func(value.M9.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M8.N7),func(value.M9.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8),func(value.M7.N8),func(value.M8.N8),func(value.M9.N8)};};
// Transposes a matrix that is [2] rows by [9] columns to a matrix that has [9] rows by [2] columns  
 M_2x9 ApplyScalar(M_2x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M1.N3),func(value.M2.N3),func(value.M1.N4),func(value.M2.N4),func(value.M1.N5),func(value.M2.N5),func(value.M1.N6),func(value.M2.N6),func(value.M1.N7),func(value.M2.N7),func(value.M1.N8),func(value.M2.N8),func(value.M1.N9),func(value.M2.N9)};};
// Transposes a matrix that is [3] rows by [9] columns to a matrix that has [9] rows by [3] columns  
 M_3x9 ApplyScalar(M_3x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M1.N9),func(value.M2.N9),func(value.M3.N9)};};
// Transposes a matrix that is [4] rows by [9] columns to a matrix that has [9] rows by [4] columns  
 M_4x9 ApplyScalar(M_4x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M1.N9),func(value.M2.N9),func(value.M3.N9),func(value.M4.N9)};};
// Transposes a matrix that is [5] rows by [9] columns to a matrix that has [9] rows by [5] columns  
 M_5x9 ApplyScalar(M_5x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M1.N9),func(value.M2.N9),func(value.M3.N9),func(value.M4.N9),func(value.M5.N9)};};
// Transposes a matrix that is [6] rows by [9] columns to a matrix that has [9] rows by [6] columns  
 M_6x9 ApplyScalar(M_6x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8),func(value.M1.N9),func(value.M2.N9),func(value.M3.N9),func(value.M4.N9),func(value.M5.N9),func(value.M6.N9)};};
// Transposes a matrix that is [7] rows by [9] columns to a matrix that has [9] rows by [7] columns  
 M_7x9 ApplyScalar(M_7x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8),func(value.M7.N8),func(value.M1.N9),func(value.M2.N9),func(value.M3.N9),func(value.M4.N9),func(value.M5.N9),func(value.M6.N9),func(value.M7.N9)};};
// Transposes a matrix that is [8] rows by [9] columns to a matrix that has [9] rows by [8] columns  
 M_8x9 ApplyScalar(M_8x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M8.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8),func(value.M7.N8),func(value.M8.N8),func(value.M1.N9),func(value.M2.N9),func(value.M3.N9),func(value.M4.N9),func(value.M5.N9),func(value.M6.N9),func(value.M7.N9),func(value.M8.N9)};};
// Transposes a matrix that is [9] rows by [9] columns to a matrix that has [9] rows by [9] columns  
 M_9x9 ApplyScalar(M_9x9 value,double (*func)(double)) {return {func(value.M1.N2),func(value.M2.N2),func(value.M3.N2),func(value.M4.N2),func(value.M5.N2),func(value.M6.N2),func(value.M7.N2),func(value.M8.N2),func(value.M9.N2),func(value.M1.N3),func(value.M2.N3),func(value.M3.N3),func(value.M4.N3),func(value.M5.N3),func(value.M6.N3),func(value.M7.N3),func(value.M8.N3),func(value.M9.N3),func(value.M1.N4),func(value.M2.N4),func(value.M3.N4),func(value.M4.N4),func(value.M5.N4),func(value.M6.N4),func(value.M7.N4),func(value.M8.N4),func(value.M9.N4),func(value.M1.N5),func(value.M2.N5),func(value.M3.N5),func(value.M4.N5),func(value.M5.N5),func(value.M6.N5),func(value.M7.N5),func(value.M8.N5),func(value.M9.N5),func(value.M1.N6),func(value.M2.N6),func(value.M3.N6),func(value.M4.N6),func(value.M5.N6),func(value.M6.N6),func(value.M7.N6),func(value.M8.N6),func(value.M9.N6),func(value.M1.N7),func(value.M2.N7),func(value.M3.N7),func(value.M4.N7),func(value.M5.N7),func(value.M6.N7),func(value.M7.N7),func(value.M8.N7),func(value.M9.N7),func(value.M1.N8),func(value.M2.N8),func(value.M3.N8),func(value.M4.N8),func(value.M5.N8),func(value.M6.N8),func(value.M7.N8),func(value.M8.N8),func(value.M9.N8),func(value.M1.N9),func(value.M2.N9),func(value.M3.N9),func(value.M4.N9),func(value.M5.N9),func(value.M6.N9),func(value.M7.N9),func(value.M8.N9),func(value.M9.N9)};};